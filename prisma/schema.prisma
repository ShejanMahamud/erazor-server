generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String             @id @unique @map("userId")
  email        String             @unique
  username     String             @unique
  firstName    String
  lastName     String
  imageUrl     String
  role      Roles              @default(USER)
  verified     VerificationStatus @default(unverified)
  isDeleted    Boolean            @default(false)
  isBlocked    Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  Notification Notification[]
  Images       Image[]
  @@index([email])
  @@index([username])
  @@index([id])

  @@unique([email, username, id])
  @@map("users")
}

model Image {
  id                  String      @id @default(uuid())
  userId              String
  processId           String      @unique
  originalFileName    String
  originalImageUrlLQ  String?
  originalImageUrlHQ  String?
  bgRemovedFileName   String?
  bgRemovedImageUrlLQ String?
  bgRemovedImageUrlHQ String?
  status              ImageStatus @default(queue)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([processId])
  @@index([status])
  @@map("images")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@map("notifications")
}

enum NotificationType {
  INFO
  WARNING
  ALERT
}

enum Roles {
  MODERATOR
  ADMIN
  USER
}

enum Permissions {
  // Admin Permissions
  MANAGE_USERS
  VIEW_ANALYTICS
  MANAGE_SUBSCRIPTIONS
  MANAGE_ROLES
  DELETE_IMAGES
  SYSTEM_SETTINGS

  // Moderator Permissions
  REVIEW_IMAGES
  BLOCK_USER
  REMOVE_CONTENT
  VIEW_USER_ACTIVITY

  // Common Permissions (Optional)
  PROCESS_IMAGES
  VIEW_OWN_HISTORY
}

enum VerificationStatus {
  transferable
  verified
  unverified
  expired
  failed
}

enum ImageStatus {
  queue
  processing
  ready
}
